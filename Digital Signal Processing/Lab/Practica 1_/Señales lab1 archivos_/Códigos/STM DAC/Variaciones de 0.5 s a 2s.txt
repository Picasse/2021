// Codigo Dac variaciones de 0.5s a 2s con rango de 0.25s
#include <stdio.h>
#include "STM32F7xx.h"
#include <math.h>

char s= ' ',sa=0;
int h=0,x=0;
int resultado,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,ES,k;
int dato_adc,dato_adc1,dato_adc2; 
float conversion1=0;
float T=2;
double f=0.5;
float c=0;
double t=0;
float fun=0;
float pi = 3.141592654;
float a=0;
float v=0;
float r3_,r2_,r1_,r0_=0;
float prueba=0;

//**

extern "C"{
	
	void ADC_IRQHandler(void){    //INTERRUPCION POR FINAL DE CONVERSION
	dato_adc = ADC3->DR;		
  if(	dato_adc<=682)
	{
		T=0.5;
		
	}	
	if ( dato_adc>682 && dato_adc<=1365)
	{
		T=0.75;
	}
			if (dato_adc>1365 && dato_adc<=2046)
 {
	 T=1;
 }
 		if (dato_adc>2046 && dato_adc<=2728)
	{
		T=1.25;
	}
			if (dato_adc>2728 && dato_adc<=3410)
	{
		T=1.5;
	}
		if (dato_adc>3410 && dato_adc<=3900)
	{
		T=1.75;
	}
if (dato_adc>3900)
	{
		T=2;
	}


	}	// FIN INTERRUPCION ADC			
	void SysTick_Handler(void){
	
		t=t+0.001;
		f=1/T;
		prueba=sin(2*pi*f*t);
	   fun=2047*prueba+2047;
		DAC->DHR12R1 = fun ;
		sa=	DAC->DHR12R1;
    //if(t==100){
		//	t=0;
		//}			
	}
} // FIN EXTERN

void conv_adc(){
	ADC3->CR2 |= (1UL << 30);        //INICIA CONVERSION ( BIT SWSTART )
	while ((ADC3->SR &= 0x2)==1);

	//ESPERA HASTA TERMINAR CONVERSION DE CANAL 1
}

int main(void){
//**	
	//CONFIGURACION CLOCK
	RCC->AHB1ENR = 0xFFFF;    //PRENDER EL CLOCK 
	RCC->APB1ENR =0X80003;//timer2-timer3
	RCC->APB1ENR |= 0x20000000; //reloj del DAC

	//CONFIGURACION ADC 
	
	//RCC->APB2ENR |= 0x400; //ENABLE CLOCK ADC3 ( BIT 10 )
	RCC->APB2ENR |=0x700;

	//GPIOF->MODER = 0xC0;	//PIN PF3 ANALOG 
	GPIOF->MODER |=(3UL<<2*3);
	
	ADC3->CR1 |= (1UL << 5);   	 //Activa la interrupcion EOCIE
	ADC3->CR2 |= (1UL << 0);   	//The ADC is powered on by setting the ADON bit in the ADC_CR2 register
	//ADC3->CR2 |= (1UL << 1);   	//ADC3->CR2 - Set Bit CONT in the ADC_CR2 register
	
	ADC3->CR2 |= (1UL << 10);   //Set to 1 the bit EOCS (The EOC bit is set in the ADC_SR) register:
	
  NVIC_EnableIRQ(ADC_IRQn);   //HABILITA INTERRUPCION DE LOS ADC
	ADC3->SQR3 = 9;     			//DEFINE CANAL DE CONVERSION(PF3 - ADC3_IN9) CANAL 9
 

	GPIOA->AFR[0] |=0X8;
	GPIOC->AFR[1] |=0X8000;
	DAC->CR |=0x1;          //encender canal 1 bit 0 ,(canal 2 bit 16)
	DAC->DHR12R1 = 0;      //codigo en bits
	

	SystemCoreClockUpdate();
	SysTick_Config(SystemCoreClock/1000); 
	while(true){
	conv_adc();//FUNCION DE CONVERSION DE ANALOGO A DIGITAL

	
	}//cierra while
}//cierra main